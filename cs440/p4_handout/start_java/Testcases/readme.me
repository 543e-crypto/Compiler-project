Group (#points) #testcases: Description
├── G1(5)  5  : Bsic x86 files that assemble and run, start/exit
├── G2(15) 12 : Integer constants in expressions and output
├── G3(15) 15 : Integer variables, assignment, input, and output
├── G4(5)  10 : Boolean and string data and printing
├── G5(20) 20 : Control flow (11 prog, some have multiple inputs)
├── G6(20) 20 : Funciton calls (37 progs, some with multiple inputs)



# List of testcases

list.txt - list of test cases (Mython program, program input, Expected output). "/dev/null" means no input is needed.
.my - Mython programs
.in - inputs to the compiled Mython programs generated by your compiler
Expeted outputs are under "./Expected_output" 

├── G1
│   ├── test_1.my       test_1: basic output
│   ├── test_2.my       test_2: basic output, with numbers
│   ├── test_3.my       test_3: basic IO
│   ├── test_4.my       test_4: print with numeric constants
│   └── test_ni00.my    test_ni00: print constant integer
├── G2
│   ├── test_5.my       test_5: basic arithmetics with constants +-
│   ├── test_6.my       test_6: basic arithmetics with constants */
│   ├── test_7.my       test_7: long expression
│   ├── test_8.my       test_8: more complicated constant evaluations, with parenthesis
│   ├── test_9.my       test_9: some really long expression to check if your using the registers properly.
│   ├── test_ni01.my    test_ni01: print arithmetic experssions w/ constants only
│   ├── test_ni02.my    test_ni02: simple constant and simple short expression
│   ├── test_ni03.my    test_ni03: many short expressions for printing
│   ├── test_ni05.my    test_ni05: print statements with only addition
│   ├── test_ni06.my    test_ni06: print statements with only subtraction
│   ├── test_ni07.my    test_ni07: expression with addition and subtraction and no paranthesis
│   └── test_ni08.my    test_ni08: a few short expressions for printing, includes some negative factors
├── G3
│   ├── test_10.my      test_10: basic tests for variable initialization (global)
│   ├── test_11.my      test_11: arithmetics involving variables
│   ├── test_13.1.in
│   ├── test_13.2.in
│   ├── test_13.my      test_13: basic tests on input() implementation
│   ├── test_i0.1.in
│   ├── test_i0.2.in
│   ├── test_i0.my      test_i0: integer variables initizliaed w/ input() 
│   ├── test_i1.1.in
│   ├── test_i1.2.in
│   ├── test_i1.my      test_i1: multiple integer variables w/ input()
│   ├── test_ni09.my    test_ni09: integer variables initialized w/ constants (assignment, expression, print)
│   ├── test_ni10.my    test_ni10: integer evaluations, one with complexity
│   ├── test_ni11.my    test_ni11: integer assigned by direct copy (x=y)
│   ├── test_ni12.my    test_ni12: variable used in expression (x = 2*y or x = y+1)
│   ├── test_ni13.my    test_ni13: integer assigned by more than one step of copying
│   ├── test_ni14.my    test_ni14: integer assigned by more than one step of copying, add one each step
│   └── test_ni15.my    test_ni15: more complex example with copying and statements
├── G4
│   ├── test_14.my      test_14: basic tests on boolean constants
│   ├── test_15.my      test_15: basic tests on boolean constants and variables
│   ├── test_16.my      test_16: tests on comparison/relational expr
│   ├── test_17.my      test_17: more tests on comparison/relational expr
│   ├── test_18.my      test_18: test on string labeling...
│   ├── test_ni16.my    test_ni16: boolean constants printed out  
│   ├── test_ni17.my    test_ni17: boolean variables with constants 
│   ├── test_ni18.my    test_ni18: boolean relational expressions printed out
│   ├── test_ni19.my    test_ni19: boolean variables from relational expressions
│   └── test_ni20.my    test_ni20: string constant and printing
├── G5
│   ├── test_19.my      test_19: test if branch (if)
│   ├── test_20.my      test_20: test else branch (if-else)
│   ├── test_21.1.in
│   ├── test_21.2.in
│   ├── test_21.3.in
│   ├── test_21.my      test_21: value clamping (multiple if)
│   ├── test_22.1.in
│   ├── test_22.2.in
│   ├── test_22.my      test_22: check if three edges can make a trangle (nested if)   2-3-2
│   ├── test_23.my      test_23: skipping while loop (no entry)
│   ├── test_24.my      test_24: enter and exit the while loop (20 loops then exits)
│   ├── test_25.my      test_25: finds a rough approximation of 100/2 (multiple loops)
│   ├── test_26.1.in
│   ├── test_26.2.in
│   ├── test_26.my      test_26: dumb three number multiplication (nested while)
│   ├── test_27.1.in
│   ├── test_27.2.in
│   ├── test_27.my      test_27: compute GCD for two inputs
│   ├── test_28.my      test_28: compute factorial for number between 0 and 12
│   ├── test_29.1.in
│   ├── test_29.my      test_29: finds all prime number up to a limit
│   ├── test_ni26.my    test_ni26: nested if statements
│   ├── test_ni27.my    test_ni27: simple if statement using boolean constant
│   ├── test_ni29.my    test_ni29: while loop with integer comparison, 1 loop
│   └── test_ni30.my    test_ni30: while loop with integer comparison, 2 loops
├── G6
│   ├── test_30.my      test_30: test with one function, no parameter, and no return value
│   ├── test_31.my      test_31: test with one function, one parameter, and no return value
│   ├── test_32.my      test_32: two functions, with some parameters, and return value
│   ├── test_34.my      test_34: a strange program with 6 functions that doesnt do anything other than rotate the parameters. No return value.
│   ├── test_35.1.in
│   ├── test_35.2.in
│   ├── test_35.my      test_35: LCM calculator
│   ├── test_f00.my     test_f00: one func, no args, no return, no local variable
│   ├── test_f01.my     test_f01: one func with return (simple value / expr), no args, no local variables 
│   ├── test_f03.my     test_f03: funcs with local variable, no return, no args
│   ├── test_f04.my     test_f04: one func with args, no return, no local variable
│   ├── test_f05.my     test_f05: local variable / global variable sharing the same name
│   ├── test_f06.my     test_f06: one func with args, return, local variables (any combination)
│   ├── test_f07.my     test_f07: one func with >1 return stmt
│   ├── test_f08.my     test_f08: return as part of the loop (early termination of loop)
│   ├── test_f11.my     test_f11: function call used in print, assignment, return
│   ├── test_f13.my     test_f13: argument as function call of self 
│   ├── test_f14.my     test_f14: argument as function call of second function
│   ├── test_f15.my     test_f15: multiple function definitions, sequence of calls
│   ├── test_f16.my     test_f16: function with parameters, nested if
│   └── test_f17.my     test_f17: function with parameters and return value
