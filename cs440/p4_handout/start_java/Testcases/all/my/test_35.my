def get_first_input():
    print("Enter the first number:")
    a = input()
    return a
fed

def get_second_input():
    print("Enter the second number:")
    b = input()
    return b
fed

def pack_inputs(a, b):
    return a * 10000 + b  ! Pack two numbers into one integer
fed

def extract_first(value):
    return value / 10000  ! Extract the first number
fed

def extract_second(value):
    return value - (value / 10000) * 10000  ! Extract the second number
fed

def validate_input(packed):
    a = extract_first(packed)
    b = extract_second(packed)

    if a < 1:
        return 0  ! Return 0 for invalid input
    fi
    if b < 1:
        return 0  ! Return 0 for invalid input
    fi
    return 1  ! Return 1 for valid input
fed

def gcd(a, b):
    while b <> 0:
        temp = b
        b = a - (a / b) * b  ! Simulate modulo operation
        a = temp
    elihw
    return a
fed

def lcm(packed):
    a = extract_first(packed)
    b = extract_second(packed)

    c = 0
    if a>b:     ! do nothing, just adds more labels to the ASM
        c = c+a
    else:
        c = c+b
    fi

    return (a * b) / gcd(a, b)  ! Compute LCM
fed

def main_():
    a = get_first_input()
    b = get_second_input()
    
    packed = pack_inputs(a, b)

    valid = validate_input(packed)
    
    if valid == 1:
        result = lcm(packed)
        print("The LCM is:")
        print(result)
    else:
        print("Invalid input. Both numbers must be positive.")
    fi
fed

print("Starting LCM computation program...")
main_()
